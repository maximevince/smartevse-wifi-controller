esphome:
  name: smartevse-wifi-controller
  includes:
    - uart_read_line_sensor.h

esp8266:
  board: modwifi

# The ESP8266 has two UARTs; the second of which is TX-only.
# Only a limited set of pins can be used.
# UART0 may use
#   either tx_pin: GPIO1  and rx_pin: GPIO3,
#   or     tx_pin: GPIO15 and rx_pin: GPIO13.
# UART1 must use:
#          tx_pin: GPIO2.
# Any other combination of pins will result in use of a software UART.

# Enable logging
logger:
  level: DEBUG
  baud_rate: 115200
  hardware_uart: UART1

# For EVSE communication
uart:
  id: uart_bus
  tx_pin: 1 # For NodeMCU: D8 - GPIO15
  rx_pin: 3 # For NodeMCU: D7 - GPIO13
  baud_rate: 115200

text_sensor:
- platform: custom
  lambda: |-
    auto uart_sensor = new UartReadLineSensor(id(uart_bus));
    App.register_component(uart_sensor);
    return {uart_sensor};
  text_sensors:
    id: "uart_readline"
    on_value:
      then:
        - mqtt.publish:
            topic: evse-controller/uart_rx
            payload: !lambda |-
              return id(uart_readline).state;

switch:
  - platform: template
    name: "solar_mode"
    lambda: |-
      if (id(uart_readline).state == "MODE    - Set to Normal, Smart or Solar EVSE mode            - Solar") {
        return true;
      } else if(id(uart_readline).state == "MODE    - Set to Normal, Smart or Solar EVSE mode            - Normal") {
        return false;
      } else {
        return {};
      }
    # These are custom shortcuts added to the SmartEVSE firmware
    turn_on_action:
      - uart.write: "SOLAR\n"
    turn_off_action:
      - uart.write: "NORMAL\n"

# This triggers SmartEVSE to output it's current state
interval:
  - interval: 5s
    then:
      - uart.write: "\n"

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

captive_portal:
    
# MQTT client config
mqtt:
  broker: 192.168.1.200
  username: !secret mqtt_user
  password: !secret mqtt_password

