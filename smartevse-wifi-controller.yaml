esphome:
  name: smartevse-wifi-controller
  includes:
    - uart_read_line_sensor.h

esp8266:
  board: modwifi

# The ESP8266 has two UARTs; the second of which is TX-only.
# Only a limited set of pins can be used.
# UART0 may use
#   either tx_pin: GPIO1  and rx_pin: GPIO3,
#   or     tx_pin: GPIO15 and rx_pin: GPIO13.
# UART1 must use:
#          tx_pin: GPIO2.
# Any other combination of pins will result in use of a software UART.

# Enable logging
logger:
  level: DEBUG
  baud_rate: 115200
  hardware_uart: UART1

# For EVSE communication
uart:
  id: uart_bus
  tx_pin: 1 # For NodeMCU: D8 - GPIO15
  rx_pin: 3 # For NodeMCU: D7 - GPIO13
  baud_rate: 115200

text_sensor:
- platform: custom
  lambda: |-
    auto uart_sensor = new UartReadLineSensor(id(uart_bus));
    App.register_component(uart_sensor);
    return {uart_sensor};
  text_sensors:
    - id: "uart_readline"
      on_value:
        then:
          - mqtt.publish:
              topic: evse-controller/uart_rx
              payload: !lambda |-
                return id(uart_readline).state;

# Pushbutton to unlock Tesla charge port
binary_sensor:
  - platform: gpio
    pin:
      number: 14
      inverted: true
    name: "Unlock Tesla Charge Port Button"

# Charge lock status light
light:
  - platform: binary
    name: "Tesla Charge Port Lock Status Light"
    output: charge_port_lock_status_output

output:
  - id: charge_port_lock_status_output
    platform: gpio
    pin: GPIO12

switch:
  - platform: template
    id: "ev_charge_solar_mode"
    name: "ev_charge_solar_mode"
    turn_on_action:
      # Write twice, to increase robustness
      - uart.write: "MODE\n"
      - delay: 500ms
      - uart.write: "SOLAR\n"
      - delay: 500ms
      - uart.write: "MODE\n"
      - delay: 500ms
      - uart.write: "SOLAR\n"
    turn_off_action:
      # Write twice, to increase robustness
      - uart.write: "MODE\n"
      - delay: 500ms
      - uart.write: "NORMAL\n"
      - delay: 500ms
      - uart.write: "MODE\n"
      - delay: 500ms
      - uart.write: "NORMAL\n"

# Example configuration entry
number:
  - platform: template
    id: ev_charge_max_current_A
    name: "EV Charge Max Current (A)"
    optimistic: false
    min_value: 6
    max_value: 48
    step: 1
    set_action:
      # Do this twice, to increase robustness
      - uart.write: "MAX\n"
      - delay: 500ms
      - uart.write: !lambda
          std::string str = std::to_string((int)x) + std::string("\n");
          ESP_LOGI("main", "MAX %s", str.c_str());
          std::vector<uint8_t> vec(str.begin(), str.end());
          return vec;
      - delay: 500ms
      - uart.write: "MAX\n"
      - delay: 500ms
      - uart.write: !lambda
          std::string str = std::to_string((int)x) + std::string("\n");
          ESP_LOGI("main", "MAX %s", str.c_str());
          std::vector<uint8_t> vec(str.begin(), str.end());
          return vec;

# This triggers SmartEVSE to output it's current state
interval:
  - interval: 5s
    then:
      - uart.write: "\n"

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_base64_encryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

captive_portal:
    
# MQTT client config
mqtt:
  broker: 192.168.1.200
  username: !secret mqtt_user
  password: !secret mqtt_password

